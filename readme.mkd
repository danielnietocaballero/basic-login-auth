**First of all, you have to run in console (from project root folder):**

`composer install`

`php db_up.php`

It will create in memory a database and a table Users with some pre-filled data. In example:

|username    |   password    |   roles|
|----------- |-----------|----------|
|'userone'   |   'userone'   |   'PAGE_1'|
|'usertwo'   |   'usertwo'   |   'PAGE_2'|
|'userthree' |   'userthree' |   'PAGE_3'|
|'god'       |   'god'       |   'ADMIN'|
|'multirol'  |   'multirol'  |   'PAGE_1\|PAGE_2'|

In every execution of this script, the DB will be dropped and re-created.


Then, you have tu run a PHP instance with the built-in server:

`php -S localhost:8000`

It will launch a php server. Then, you could go to the browser, and go to http://localhost:8000/

A login form will be shown.

The ADMIN user, will be redirected to PAGE_1

Also you can test the API REST using any browser client, in example: 
https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo/related

For making a correct request, each verb has a description before its method body.

Basic authentication in the API REST is waiting for user and password in the headers.
If a resource ID is given (GET, PUT, DELETE) must be given as a URL param, 
and other information (PUT or POST), as part of the request body.

**For running tests:**
From the project root, you have to (from console):
`{phpunitpath} src/tests/*`

Note that {phpunitpath} must be your path the PHPUnit executable, in my case, 
I could use the one in my vendors:
`./vendor/bin/phpunit src/tests/*`

This operation will launch all tests, that are included in that folder. There are tests for:

* Model (User). Testing model, Repository classes are tested because Model's tests
have been created for testing the model logic + data access.

* Api (User). _In progress_
